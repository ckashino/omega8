overview:
  8-bit opcodes
  8 8-bit general data registers (r0-r7)
  1 16-bit PC register
  1 16-bit stack register
  1 16-bit return address register

  multi-cycle single-stage, harvard architecture

instruction overview:

  mnemonic:         opcode  results:                           cycles:
  LDI r3, imm8      0x00    r3 = d1                            3
  LD r3, addr16     0x10    r3 = mem[D1]                       >=5
  ST addr16, r1     0x11    mem[D1] = r1                       >=4
  LDI16 R, imm16    N/A     R = D1        // # TODO #          
  LD16 R, (addr16)  N/A     R = mem[D1]   // Pseudo Instrs.
  ST16 (addr16), R  N/A     mem[D1] = R   // ########
  MOV r3, r1        0x20    r3 = r1                            3
  ADD r3, r1, r2    0x30    r3 = r1 + r2                       4
  ADDC r3, r1, r2   0x31    r3 = r1 + r2 + carry               4
  SUB r3, r1, r2    0x32    r3 = r1 - r2                       4
  SUBB r3, r1, r2   0x33    r3 = r1 - r2 - borrow              4
  AND r3, r1, r2    0x34    r3 = r1 & r2                       4
  OR  r3, r1, r2    0x35    r3 = r1 | r2                       4
  XOR r3, r1, r2    0x36    r3 = r1 ^ r2                       4
  ADDI r3, r1, imm8 0x40    r3 = r1 + imm8                     4
  JMP addr16        0x50    PC = D1                            1
  JZ addr16         0x51    PC = D1 if Z flag is set           1
  JNZ addr16        0x52    PC = D1 if Z flag is not set       1
  JN addr16         0x53    PC = D1 if N flag is set           1
  JNN addr16        0x54    PC = D1 if N flag is not set       1
  CALL addr16       0x60    RA = PC, PC = D1                   1
  RET               0x70    PC = RA                            1
  PUSH r1           0x80    mem[SP] = r, SP = SP - 1           >=4
  POP r1            0x81    SP = SP + 1, r = mem[SP]           >=4
  NOP               0xFF    No operation                       1


machine instr. are all of form:

opcode   r1     r2     r3 and dont care or imm16 [15:8]  imm8 or imm16 [7:0]
CCCCCCCC AAA    BBB    CCCXXXXX                          IIIIIIII 
8 bit    3 bit  3 bit  16 bit 


alu operations
  code:   operation:
  000     x1 + x2 + carry_in
  001     x1 - x2 - borrow_in
  010     x1 & x2
  011     x1 | x2
  100     x1 ^ x2
